#!/usr/bin/env python3
# license: WTFPLv2
# original: 2007
# rewritten for modernization in 2019

from argparse import ArgumentParser, FileType
import sys

try:
    import termcolor
except ImportError:
    def styled(s, *args, **kwargs):
        return s
else:
    def styled(s, *args, **kwargs):
        if sys.stdout.isatty():
            s = termcolor.colored(s, *args, **kwargs)
        return s


REPLACES = {
    '\n': styled(r'\n', 'green'),
    '\t': styled(r'\t', 'green'),
    '\r': styled(r'\r', 'green'),
    '\f': styled(r'\f', 'green'),
    '\b': styled(r'\b', 'green'),
    '\a': styled(r'\a', 'green'),
    '\v': styled(r'\v', 'green'),
    '\x00': styled(r'\0', attrs=['reverse']),
    ' ': styled('sp', 'green'),
}

def transform(b):
    char = chr(b)

    if char in REPLACES:
        return f'{REPLACES[char]}'
    elif 0x20 < b < 0x7f:
        return f'{char} '
    else:
        return f"{styled(f'{b:02X}', attrs=['reverse'])}"


def print_line(line):
    print(' '.join(transform(b) for b in line))


def main():
    parser = ArgumentParser(description='Visual Hex Dump')
    parser.add_argument('--line-addresses', action='store_true')
    parser.add_argument('--hex', action='store_true')
    parser.add_argument('file', nargs='?', type=FileType('rb'), default=sys.stdin.buffer)
    args = parser.parse_args()

    total = 0
    while True:
        line = args.file.readline()
        if not line:
            break

        if args.line_addresses:
            print(f'{total:08x} ', end='')

        if args.hex:
            print(' '.join(f'{b:02x}' for b in line))
        else:
            print_line(line)

        total += len(line)


if __name__ == '__main__':
    main()
